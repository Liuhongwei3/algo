/**
 * 给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以
 * 使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。
 * 
 * candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 
 * 
 * 对于给定的输入，保证和为 target 的不同组合数少于 150 个。
 * 
 * https://leetcode.cn/problems/combination-sum/description
 * 
 * 示例 1：
 * 
 * 输入：candidates = [2,3,6,7], target = 7
 * 输出：[[2,2,3],[7]]
 * 解释：
 * 2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。
 * 7 也是一个候选， 7 = 7 。
 * 仅有这两种组合。
 * 
 * 示例 2：
 * 
 * 输入: candidates = [2,3,5], target = 8
 * 输出: [[2,2,2,2],[2,3,3],[3,5]]
 * 
 * 示例 3：
 * 
 * 输入: candidates = [2], target = 1
 * 输出: []
 * 
 * @param {*} candidates 
 * @param {*} target 
 * @returns 
 */
const combinationSum = (candidates, target) => {
    const res = [];
    const arrSorted = candidates.sort((a, b) => a - b);

    if (arrSorted[0] > target) {
        return res;
    }

    const dfs = (start, temp, sum) => {
        if (sum >= target) {
            if (sum === target) {
                res.push([...temp]);
            }

            return;
        }

        for (let i = start; i < candidates.length; i++) {
            const curValue = candidates[i];
            const curSum = curValue + sum;

            // 因为已经排序过了，所以如果 curSum > target 时便不再需要继续
            if (curSum > target) {
                break;
            }

            // 推入当前遍历元素
            temp.push(curValue);

            console.log(curValue, curSum, i, temp);
            if (curSum <= target) {
                dfs(i, temp, curSum);
            }

            console.log('--------------------------------', res);
            // 递归结束后推出当前元素，进入下一个元素的遍历
            temp.pop();
        }
    }

    dfs(0, [], 0);

    return res;
}

const res1 = combinationSum([2, 3, 6, 7], 7);

console.log(res1);

// 2 2 0 [ 2 ]
// 2 4 0 [ 2, 2 ]
// 2 6 0 [ 2, 2, 2 ]
// -------------------------------- []
// 3 7 1 [ 2, 2, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 3 5 1 [ 2, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 3 3 1 [ 3 ]
// 3 6 1 [ 3, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 6 2 [ 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 7 3 [ 7 ]
// -------------------------------- [ [ 2, 2, 3 ], [ 7 ] ]
// [ [ 2, 2, 3 ], [ 7 ] ]



// 2 2 0 [ 2 ]
// 2 4 0 [ 2, 2 ]
// 2 6 0 [ 2, 2, 2 ]
// 2 8 0 [ 2, 2, 2, 2 ]
// -------------------------------- []
// 3 9 1 [ 2, 2, 2, 3 ]
// -------------------------------- []
// 6 12 2 [ 2, 2, 2, 6 ]
// -------------------------------- []
// 7 13 3 [ 2, 2, 2, 7 ]
// -------------------------------- []
// -------------------------------- []
// 3 7 1 [ 2, 2, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 10 2 [ 2, 2, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 11 3 [ 2, 2, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 3 5 1 [ 2, 3 ]
// 3 8 1 [ 2, 3, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 11 2 [ 2, 3, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 12 3 [ 2, 3, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 8 2 [ 2, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 9 3 [ 2, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 3 3 1 [ 3 ]
// 3 6 1 [ 3, 3 ]
// 3 9 1 [ 3, 3, 3 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 12 2 [ 3, 3, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 13 3 [ 3, 3, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 9 2 [ 3, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 10 3 [ 3, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 6 6 2 [ 6 ]
// 6 12 2 [ 6, 6 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 13 3 [ 6, 7 ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// -------------------------------- [ [ 2, 2, 3 ] ]
// 7 7 3 [ 7 ]
// -------------------------------- [ [ 2, 2, 3 ], [ 7 ] ]
// [ [ 2, 2, 3 ], [ 7 ] ]

